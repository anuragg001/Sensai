// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id                    String     @id @default(uuid())
  clerkUserId           String      @unique
  email                 String      @unique
  name                  String?
  imageUrl              String?
  industry              String?    //combined industry-subindustry
  industryInsights      IndustryInsights?   @relation(fields: [industry],references: [industry])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

//Profile 
  bio                   String?
  experience            Int?
  skills                String[]


  assesments            Assements[]
  resume                Resume?
  coverLetter           CoverLetter[]

}


model IndustryInsights {
  id              String     @id @default(cuid())
  industry        String      @unique

  //users in the industry
  users           User[]

  //salary data
  salaryRanges    Json[]

  //Industry Trends
  growthRate      Float   //Industry Growth Rate 
  demandLevel     DemandLevel  //"high","Medium","low"
  topSkills       String[]  //most in demand skills

  //Market Condtions 
  marketOutlook   MarketOutlook  //"Positive","Negative","Neutral"
  keyTrends       String[] //Array of trends in industry 
  
  //Learning suggestion 
   recommendedSKills  String[]


   lastUpdated     DateTime     @default(now())
   nextUpdate      DateTime

@@index([industry])

}


model Assements{
  id              String     @id @default(cuid())
  userId          String      
  user            User       @relation(fields: [userId],references: [id])
  quizScore       Float       
  questions       Json[]
  category        String 
  improvementTip  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

@@index([userId])

}
model Resume{
  id              String     @id @default(cuid())
  userId          String      @unique
  user            User       @relation(fields: [userId],references: [id])
  content         String     @db.Text
  atsScore        Float?
  feedback        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime    @updatedAt  
}
model CoverLetter{
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId],references: [id])
  content         String     
  jobDescription  String?  
  companyName     String?   //Name of the company applying to 
  jobTitle        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime    @updatedAt  

@@index([userId])

}


enum  DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL 
  NEGATIVE 
}
